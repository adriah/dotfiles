--- dwm.c
+++ dwm.c
@@ -50,8 +53,12 @@
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
+#ifndef MAX
 #define MAX(A, B)               ((A) > (B) ? (A) : (B))
+#endif
+#ifndef MIN
 #define MIN(A, B)               ((A) < (B) ? (A) : (B))
+#endif
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
@@ -798,7 +813,7 @@ drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]) {
 
 void
 drawtext(const char *text, unsigned long col[ColLast], Bool invert) {
-	char buf[256];
+	char buf[512];
 	int i, x, y, h, len, olen;
 
 	XSetForeground(dpy, dc.gc, col[invert ? ColFG : ColBG]);
@@ -807,20 +822,25 @@ drawtext(const char *text, unsigned long col[ColLast], Bool invert) {
 		return;
 	olen = strlen(text);
 	h = dc.font.ascent + dc.font.descent;
-	y = dc.y + (dc.h / 2) - (h / 2) + dc.font.ascent;
+	y = dc.y + (dc.h / 2) - (h / 2);
 	x = dc.x + (h / 2);
-	/* shorten text if necessary */
+	/* shorten text if necessary (this could wreak havoc with pango markup but fortunately
+	   dc.w is adjusted to the width of the status text and not the other way around) */
 	for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
 	if(!len)
 		return;
 	memcpy(buf, text, len);
 	if(len < olen)
 		for(i = len; i && i > len - 3; buf[--i] = '.');
-	XSetForeground(dpy, dc.gc, col[invert ? ColBG : ColFG]);
-	if(dc.font.set)
-		XmbDrawString(dpy, dc.drawable, dc.font.set, dc.gc, x, y, buf, len);
+	if(text == stext && statusmarkup)
+		pango_layout_set_markup(dc.font.layout, buf, len);
 	else
-		XDrawString(dpy, dc.drawable, dc.gc, x, y, buf, len);
+		pango_layout_set_text(dc.font.layout, buf, len);
+	pango_xft_render_layout(dc.xft.drawable,
+		(col == dc.norm ? dc.xft.norm : dc.xft.sel) + (invert ? ColBG : ColFG),
+		dc.font.layout, x * PANGO_SCALE, y * PANGO_SCALE);
+	if(text == stext && statusmarkup) /* clear markup attributes */
+		pango_layout_set_attributes(dc.font.layout, NULL);
 }
 
 void
@@ -1611,17 +1619,16 @@ setup(void) {
 	cursor[CurResize] = XCreateFontCursor(dpy, XC_sizing);
 	cursor[CurMove] = XCreateFontCursor(dpy, XC_fleur);
 	/* init appearance */
-	dc.norm[ColBorder] = getcolor(normbordercolor);
-	dc.norm[ColBG] = getcolor(normbgcolor);
-	dc.norm[ColFG] = getcolor(normfgcolor);
-	dc.sel[ColBorder] = getcolor(selbordercolor);
-	dc.sel[ColBG] = getcolor(selbgcolor);
-	dc.sel[ColFG] = getcolor(selfgcolor);
+	dc.norm[ColBorder] = getcolor(normbordercolor, dc.xft.norm + ColBorder);
+	dc.norm[ColBG] = getcolor(normbgcolor, dc.xft.norm + ColBG);
+	dc.norm[ColFG] = getcolor(normfgcolor, dc.xft.norm + ColFG);
+	dc.sel[ColBorder] = getcolor(selbordercolor, dc.xft.sel + ColBorder);
+	dc.sel[ColBG] = getcolor(selbgcolor, dc.xft.sel + ColBG);
+	dc.sel[ColFG] = getcolor(selfgcolor, dc.xft.sel + ColFG);
 	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
+	dc.xft.drawable = XftDrawCreate(dpy, dc.drawable, DefaultVisual(dpy, screen), DefaultColormap(dpy, screen));
 	dc.gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
-	if(!dc.font.set)
-		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
 	/* init bars */
 	updatebars();
 	updatestatus();
@@ -1691,13 +1698,15 @@ tagmon(const Arg *arg) {
 
 int
 textnw(const char *text, unsigned int len) {
-	XRectangle r;
-
-	if(dc.font.set) {
-		XmbTextExtents(dc.font.set, text, len, NULL, &r);
-		return r.width;
-	}
-	return XTextWidth(dc.font.xfont, text, len);
+	PangoRectangle r;
+	if(text == stext && statusmarkup)
+		pango_layout_set_markup(dc.font.layout, text, len);
+	else
+		pango_layout_set_text(dc.font.layout, text, len);
+	pango_layout_get_extents(dc.font.layout, 0, &r);
+	if(text == stext && statusmarkup) /* clear markup attributes */
+		pango_layout_set_attributes(dc.font.layout, NULL);
+	return r.width / PANGO_SCALE;
 }
 
 void
